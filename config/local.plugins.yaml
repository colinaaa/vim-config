--- # -------
# PLUGINS
# ===
# See config/plugins/all.vim for plugin mappings and config/plugins/*.vim

# Startup
- repo: itchyny/vim-gitbranch
  if: 0
- repo: itchyny/vim-parenmatch
  if: 0
- repo: thinca/vim-localrc
  if: 0
- repo: romainl/vim-cool
  if: 0
- { repo: wellle/visual-split.vim, if: 0 }
- repo: rafi/awesome-vim-colorschemes
  merged: 0
  hook_add: let g:onedark_terminal_italics=1

# Lazy Loading
# ==========================================

- repo: kylelaker/riscv.vim
  merged: 0

- repo: lervag/vimtex
  on_ft: tex

- repo: pearofducks/ansible-vim
  if: 0

- repo: JuliaEditorSupport/julia-vim
  on_ft: julia
  hook_add: let g:latex_to_unicode_tab = 0

- repo: kdheepak/JuliaFormatter.vim
  on_ft: julia
  hook_add: |
    nnoremap <silent> <localleader>jf :<C-u>call JuliaFormatter#Format(0)<CR>
    vnoremap <localleader>jf :<C-u>call JuliaFormatter#Format(1)<CR>

- repo: Olical/vim-scheme
  depends: vim-sexp
  on_cmd: SchemeConnect
  on_ft:
    - scheme
    - racket

- repo: guns/vim-sexp
  depends: vim-sexp-mappings-for-regular-people
  on_ft:
    - scheme
    - racket

- repo: justinmk/vim-syntax-extra
  on_ft:
    - c
    - lex
    - yacc

- repo: tpope/vim-sexp-mappings-for-regular-people

# ==========================================
# Commands
# --------

- { repo: Shougo/vinarise.vim, if: 0 }
  # use Shougo/deorise.nvim
- { repo: guns/xterm-color-table.vim, if: 0 }

- { repo: cocopon/colorswatch.vim, if: 0 }

- repo: t9md/vim-choosewin
  if: 0

# ==========================================
# Language & Codes
# ---------

# loaded only on demand
- repo: sheerun/vim-polyglot
  hook_add: let g:polyglot_disabled = ['css', 'latex', 'opencl', 'go']

- repo: pangloss/vim-javascript
  if: 0

- repo: MaxMEllon/vim-jsx-pretty
  if: 0

- repo: HerringtonDarkholme/yats.vim
  if: 0

- repo: jparise/vim-graphql
  if: 0

- repo: heavenshell/vim-jsdoc
  on_cmd: JsDoc

- repo: sbdchd/neoformat
  hook_source: source $VIM_PATH/config/plugins/neoformat.vim
  hook_add: |
    let g:neoformat_haskell_ormolu = { 'exe': 'ormolu', 'args': [] }
  on_cmd: Neoformat

# Golang related
- repo: fatih/vim-go
  if: has('nvim-0.3.2') || has('patch-8.0.1453')
  on_ft: [go, gomod]
  hook_add: |
    let g:go_gopls_enabled = 1
    let g:go_code_completion_enabled = 0
    let g:go_doc_keywordprg_enabled = 1
    let g:go_def_mapping_enabled = 0
    let g:go_mod_fmt_autosave = 0
    let g:go_echo_go_info = 0
    let g:go_list_type = "quickfix"
    let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
    let g:go_metalinter_autosave_enabled = ['vet', 'golint']
    let g:go_metalinter_autosave = 1
    let g:go_decls_includes = "func,type"
    let g:go_auto_type_info = 1
    let g:go_highlight_array_whitespace_error = 1
    let g:go_highlight_chan_whitespace_error = 1
    let g:go_highlight_space_tab_error = 1
    let g:go_highlight_trailing_whitespace_error = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_function_parameters = 1
    let g:go_highlight_types = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_string_spellcheck = 0
    let g:go_highlight_variable_declarations = 1
    let g:go_highlight_variable_assignments = 0

- repo: dense-analysis/ale
  on_event: FileType
  hook_add: |
    let g:ale_disable_lsp = 0
    let g:ale_echo_delay = 100
    let g:ale_lint_delay = 1000
    let g:ale_echo_msg_format = '%linter%: %code: %%s [%severity%]'
    let g:ale_history_enabled = 0
    let g:ale_sign_error = '✖'
    let g:ale_sign_warning = 'ⁱ'
    let g:ale_maximum_file_size = 500000
    let g:ale_linters = {
            \ 'go': ['gobuild', 'gopls', 'govet'],
            \ 'cpp': ['clangd', 'ccls', 'clangcheck', 'cppcheck']
            \ }
    let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'javascript': ['prettier_eslint', 'eslint'],
    \   'cpp': ['clangtidy'],
    \   'go': ['gofmt', 'goimports']
    \}
    let g:ale_fix_on_save = 1
    let g:ale_go_gopls_options = '-remote=auto'
    let g:ale_haskell_hlint_executable = 'hlint'
    let g:ale_haskell_hie_executable = 'hie-wrapper --lsp'

- repo: mattn/vim-lsp-settings
  depends: vim-lsp
  merged: 0
  hook_add: |
    let g:lsp_settings = {
    \   'texlab': {
    \     'cmd': ['texlab'],
    \     'whitelist': ['tex', 'plaintex', 'bib'],
    \   },
    \   'gopls': {
    \     'disabled': 1
    \   }
    \ }

- repo: prabirshrestha/asyncomplete-tags.vim
  if: 0
  depends: asyncomplete.vim
  hook_source: |
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#tags#get_source_options({
      \ 'name': 'tags',
      \ 'whitelist': ['*'],
      \ 'blacklist': ['go', 'python', 'vim', 'denite-filter', 'clap_input', 'tex', 'javascript', 'typescript'],
      \ 'completor': function('asyncomplete#sources#tags#completor'),
      \ 'config': { 'max_file_size': 5000000 },
      \ }))

- repo: yami-beta/asyncomplete-omni.vim
  hook_source: |
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#omni#get_source_options({
      \ 'name': 'omni',
      \ 'whitelist': ['*'],
      \ 'blacklist': ['c', 'cpp', 'html'],
      \ 'completor': function('asyncomplete#sources#omni#completor')
      \  }))


# ==========================================
# Interface
# ---------

- { repo: haya14busa/vim-edgemotion, if: 0 }
- { repo: t9md/vim-quickhl, if: 0 }

- repo: mhinz/vim-startify
  hook_source: source $VIM_PATH/config/plugins/startify.vim

- repo: itchyny/lightline.vim
  hook_add: |
    let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ }

- repo: luochen1990/rainbow
  hook_add: let g:rainbow_active = 1

- repo: octol/vim-cpp-enhanced-highlight
  on_ft: 'cpp'
  hook_add: |
    let g:cpp_class_scope_highlight = 1
    let g:cpp_member_variable_highlight = 1
    let g:cpp_class_decl_highlight = 1
    let g:cpp_posix_standard = 1
    let g:cpp_experimental_template_highlight = 1
# ==========================================
# Completion and code analysis
# ----------

# ==========================================
# Operators
# ---------
- repo: kana/vim-operator-user # only autoload functions, lazy by nature

- repo: kana/vim-operator-replace
  if: 0

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  depends: vim-repeat
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

- repo: tpope/vim-surround

- repo: tpope/vim-repeat

# ==========================================
# Text objects
# ------------
- repo: kana/vim-textobj-user # only autoload functions, lazy by nature
- { repo: terryma/vim-expand-region, if: 0 }

- repo: osyo-manga/vim-textobj-multiblock
  if: 0

- repo: kana/vim-textobj-function
  if: 0

- repo: colinaaa/swim.vim
  if: has('mac')
  build: "./build.sh"

- repo: ianding1/leetcode.vim
  on_cmd: LeetCodeList
  hook_add: |
    let g:leetcode_browser='chrome'

- repo: liuchengxu/vim-which-key
  on_cmd: ['WhichKey', 'WhichKey!']
  hook_add: |
    nnoremap <silent> <leader> :WhichKey ','<CR>
    nnoremap <silent> <localleader> :WhichKey ';'<CR>
    set timeoutlen=500

- repo: rhysd/clever-f.vim
  hook_add: |
    let g:clever_f_across_no_line=1

#  vim: set ts=2 sw=2 tw=80 et :
